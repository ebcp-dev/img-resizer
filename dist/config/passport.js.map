{"version":3,"sources":["../../src/config/passport.js"],"names":["JwtStrategy","passportJWT","Strategy","ExtractJwt","opts","jwtFromRequest","fromAuthHeaderAsBearerToken","secretOrKey","useJwt","passport","use","jwt_payload","done"],"mappings":";;;;;;AAGA;;;;AAGA;;;;AAFA,IAAMA,cAAcC,sBAAYC,QAAhC,C,CAJA;;AAEA;;AAGA,IAAMC,aAAaF,sBAAYE,UAA/B;;;AAGA;AACA,IAAMC,OAAO,EAAb;AACA;AACAA,KAAKC,cAAL,GAAsBF,WAAWG,2BAAX,EAAtB;AACAF,KAAKG,WAAL,GAAmBA,iBAAnB;;AAEA;;;;;AAKA,IAAMC,SAAS,SAATA,MAAS,WAAY;AACzBC,WAASC,GAAT,CACE,IAAIV,WAAJ,CAAgBI,IAAhB,EAAsB,UAACO,WAAD,EAAcC,IAAd,EAAuB;AAC3C,WAAOA,KAAK,IAAL,EAAWD,WAAX,CAAP;AACD,GAFD,CADF;AAKD,CAND;;AAQA;kBACeH,M","file":"passport.js","sourcesContent":["/** @module src/config/passport */\n\n/** Import passport jwt strategy.  */\nimport passportJWT from 'passport-jwt';\nconst JwtStrategy = passportJWT.Strategy;\nconst ExtractJwt = passportJWT.ExtractJwt;\nimport { secretOrKey } from './keys';\n\n/** Define options object to pass into JwtStrategy function. */\nconst opts = {};\n/** Get token from Authorization Header. */\nopts.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();\nopts.secretOrKey = secretOrKey;\n\n/**\n * Create new JwtStrategy with passport.\n * Returns the payload once authenticated.\n * @param {passport} passport\n */\nconst useJwt = passport => {\n  passport.use(\n    new JwtStrategy(opts, (jwt_payload, done) => {\n      return done(null, jwt_payload);\n    })\n  );\n};\n\n/** Export the function. */\nexport default useJwt;\n"]}