{"version":3,"sources":["../../src/validation/jsonpatch.js"],"names":["validateJsonPatch","errors","data","op","path","value","Validator","isEmpty","obj","isValid"],"mappings":";;;;;;AAGA;;;;AAEA;;;;;;AAEA;;;;;AAPA;;AAEA;AAUA,IAAMA,oBAAoB,SAApBA,iBAAoB,OAAQ;AAChC;AACA,MAAIC,SAAS,EAAb;;AAEA;AACAC,OAAKC,EAAL,GAAU,CAAC,uBAAQD,KAAKC,EAAb,CAAD,GAAoBD,KAAKC,EAAzB,GAA8B,EAAxC;AACAD,OAAKE,IAAL,GAAY,CAAC,uBAAQF,KAAKE,IAAb,CAAD,GAAsBF,KAAKE,IAA3B,GAAkC,EAA9C;AACAF,OAAKG,KAAL,GAAa,CAAC,uBAAQH,KAAKG,KAAb,CAAD,GAAuBH,KAAKG,KAA5B,GAAoC,EAAjD;;AAEA;AACA,MAAIC,oBAAUC,OAAV,CAAkBL,KAAKC,EAAvB,CAAJ,EAAgC;AAC9BF,WAAOE,EAAP,GAAY,wBAAZ;AACD;;AAED;AACA,MACED,KAAKC,EAAL,KAAY,KAAZ,IACAD,KAAKC,EAAL,KAAY,QADZ,IAEAD,KAAKC,EAAL,KAAY,SAFZ,IAGAD,KAAKC,EAAL,KAAY,MAHZ,IAIAD,KAAKC,EAAL,KAAY,MAJZ,IAKAD,KAAKC,EAAL,KAAY,MANd,EAOE;AACAF,WAAOE,EAAP,GAAY,yBAAZ;AACD;;AAED;AACA,MAAIG,oBAAUC,OAAV,CAAkBL,KAAKE,IAAvB,CAAJ,EAAkC;AAChCH,WAAOG,IAAP,GAAc,mBAAd;AACD;;AAED;AACA,MAAI,CAACF,KAAKM,GAAL,CAASJ,IAAd,EAAoB;AAClBH,WAAOG,IAAP,GAAc,oBAAd;AACD;;AAED;AACA,MACEF,KAAKC,EAAL,KAAY,KAAZ,IACAD,KAAKC,EAAL,KAAY,SADZ,IAEAD,KAAKC,EAAL,KAAY,MAFZ,IAGAG,oBAAUC,OAAV,CAAkBL,KAAKG,KAAvB,CAJF,EAKE;AACAJ,WAAOI,KAAP,GAAe,oBAAf;AACD;;AAED;AACA,SAAO;AACLJ,kBADK;AAELQ,aAAS,uBAAQR,MAAR;AAFJ,GAAP;AAID,CAnDD;AARA;kBA6DeD,iB","file":"jsonpatch.js","sourcesContent":["/** @module src/validation/jsonpatch */\n\n/** Import Validator dependency. */\nimport Validator from 'validator';\n/** Import isEmpty custom function*/\nimport isEmpty from './utility/is-empty';\n\n/**\n * Function to validate arguments.\n * Checks if arguments are empty or invalid and returns an error object\n * and a boolean value whether the error object is empty or not.\n */\nconst validateJsonPatch = data => {\n  /** Define errors object. */\n  let errors = {};\n\n  /** Replace values to empty string if object key is empty. */\n  data.op = !isEmpty(data.op) ? data.op : '';\n  data.path = !isEmpty(data.path) ? data.path : '';\n  data.value = !isEmpty(data.value) ? data.value : '';\n\n  /** Set op to required error message if empty. */\n  if (Validator.isEmpty(data.op)) {\n    errors.op = 'Operation is required.';\n  }\n\n  /** Set op to invalid error message if operation is not valid. */\n  if (\n    data.op !== 'add' &&\n    data.op !== 'remove' &&\n    data.op !== 'replace' &&\n    data.op !== 'move' &&\n    data.op !== 'copy' &&\n    data.op !== 'test'\n  ) {\n    errors.op = 'Operation is not valid.';\n  }\n\n  /** Set path value to required error message if empty. */\n  if (Validator.isEmpty(data.path)) {\n    errors.path = 'Path is required.';\n  }\n\n  /** Set path value to invalid error message if not found. */\n  if (!data.obj.path) {\n    errors.path = 'Path is not valid.';\n  }\n\n  /** Set value value to required error message if empty. */\n  if (\n    data.op === 'add' &&\n    data.op === 'replace' &&\n    data.op === 'test' &&\n    Validator.isEmpty(data.value)\n  ) {\n    errors.value = 'Value is required.';\n  }\n\n  /** Return errors object and isValid boolean value. */\n  return {\n    errors,\n    isValid: isEmpty(errors)\n  };\n};\n\nexport default validateJsonPatch;\n"]}