{"version":3,"sources":["../../src/services/resizer.js"],"names":["router","express","Router","post","passport","authenticate","session","req","res","body","errors","isValid","status","json","download","method","url","responseType","then","response","data","imgUrl","type","pipe","transform","sharpObj","resize"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAIA;;;;;;AAHA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;AAGAF,OAAOG,IAAP,CACE,GADF,EAEEC,mBAASC,YAAT,CAAsB,KAAtB,EAA6B,EAAEC,SAAS,KAAX,EAA7B,CAFF,EAGE,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,6BACgB,uBAAoBD,IAAIE,IAAxB,CADhB;AAAA,MACJC,MADI,wBACJA,MADI;AAAA,MACIC,OADJ,wBACIA,OADJ;;AAEZ,MAAI,CAACA,OAAL,EAAc;AACZ,WAAOH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,MAArB,CAAP;AACD;;AAED;AACA,MAAMI,WAAW,SAAXA,QAAW;AAAA,WACf,qBAAM;AACJC,cAAQ,KADJ;AAEJC,cAFI;AAGJC,oBAAc;AAHV,KAAN,EAIGC,IAJH,CAIQ;AAAA,aAAYC,SAASC,IAArB;AAAA,KAJR,CADe;AAAA,GAAjB;;AAOA;AAdY,MAeNC,MAfM,GAeKd,IAAIE,IAfT,CAeNY,MAfM;AAgBZ;;AACAb,MAAIc,IAAJ,CAAS,KAAT;AACA;AACAR,WAASO,MAAT,EAAiBH,IAAjB,CAAsB;AAAA,WAAYC,SAASI,IAAT,CAAcC,WAAd,EAA2BD,IAA3B,CAAgCf,GAAhC,CAAZ;AAAA,GAAtB;AACD,CAvBH;;AA0BA;AACA,IAAMgB,YAAY,SAAZA,SAAY,GAAM;AACtB,MAAMC,WAAW,sBAAjB;AACAA,WAASC,MAAT,CAAgB,EAAhB,EAAoB,EAApB;AACA,SAAOD,QAAP;AACD,CAJD;;kBAMezB,M","file":"resizer.js","sourcesContent":["import express from 'express';\nimport passport from 'passport';\nimport axios from 'axios';\nimport sharp from 'sharp';\nimport jsonpatch from 'json-patch';\nconst router = express.Router();\n\n// Validation imports\nimport validateRequestBody from '../validation/resizer';\n\nrouter.post(\n  '/',\n  passport.authenticate('jwt', { session: false }),\n  (req, res) => {\n    const { errors, isValid } = validateRequestBody(req.body);\n    if (!isValid) {\n      return res.status(400).json(errors);\n    }\n\n    // Download image with axios\n    const download = url =>\n      axios({\n        method: 'get',\n        url,\n        responseType: 'stream'\n      }).then(response => response.data);\n\n    // Get image source\n    let { imgUrl } = req.body;\n    // Set response type to .jpg\n    res.type('jpg');\n    // Download image and pipe to response\n    download(imgUrl).then(response => response.pipe(transform()).pipe(res));\n  }\n);\n\n// Resize image with Sharp\nconst transform = () => {\n  const sharpObj = sharp();\n  sharpObj.resize(50, 50);\n  return sharpObj;\n};\n\nexport default router;\n"]}