{"version":3,"sources":["../../src/services/resizer.js"],"names":["router","express","Router","post","passport","authenticate","session","req","res","body","errors","isValid","status","json","imgUrl","type","download","then","response","pipe","transform","method","url","responseType","data","sharpObj","resize"],"mappings":";;;;;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;AAIA;;;;;;AAVA;;AAEA;AAKA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;AAGA;;;;;;;AAOAF,OAAOG,IAAP,CACE,GADF,EAEEC,mBAASC,YAAT,CAAsB,KAAtB,EAA6B,EAAEC,SAAS,KAAX,EAA7B,CAFF,EAGE,UAACC,GAAD,EAAMC,GAAN,EAAc;AACZ;AADY,6BAEgB,uBAAoBD,IAAIE,IAAxB,CAFhB;AAAA,MAEJC,MAFI,wBAEJA,MAFI;AAAA,MAEIC,OAFJ,wBAEIA,OAFJ;AAGZ;;;AACA,MAAI,CAACA,OAAL,EAAc;AACZ,WAAOH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,MAArB,CAAP;AACD;;AAED;AARY,MASNI,MATM,GASKP,IAAIE,IATT,CASNK,MATM;AAUZ;;AACAN,MAAIO,IAAJ,CAAS,KAAT;AACA;AACAC,WAASF,MAAT,EAAiBG,IAAjB,CAAsB;AAAA,WAAYC,SAASC,IAAT,CAAcC,WAAd,EAA2BD,IAA3B,CAAgCX,GAAhC,CAAZ;AAAA,GAAtB;AACD,CAjBH;;AAoBA;;;AAGA,IAAMQ,WAAW,SAAXA,QAAW;AAAA,SACf,qBAAM;AACJK,YAAQ,KADJ;AAEJC,YAFI;AAGJC,kBAAc;AAHV,GAAN,EAIGN,IAJH,CAIQ;AAAA,WAAYC,SAASM,IAArB;AAAA,GAJR,CADe;AAAA,CAAjB;;AAOA;;;;AAIA,IAAMJ,YAAY,SAAZA,SAAY,GAAM;AACtB,MAAMK,WAAW,sBAAjB;AACAA,WAASC,MAAT,CAAgB,EAAhB,EAAoB,EAApB;AACA,SAAOD,QAAP;AACD,CAJD;;kBAMezB,M","file":"resizer.js","sourcesContent":["/** @module src/services/resizer */\n\n/** Import dependencies. */\nimport express from 'express';\nimport passport from 'passport';\nimport axios from 'axios';\nimport sharp from 'sharp';\nconst router = express.Router();\n\n/** Import validation. */\nimport validateRequestBody from '../validation/resizer';\n\n/**\n * @function post\n * Router post function for root url.\n * Downloads an image based on\n * image url from request body. Uses jwt authentication\n * and rejects unauthorized access.\n */\nrouter.post(\n  '/',\n  passport.authenticate('jwt', { session: false }),\n  (req, res) => {\n    /** Validate request body first.  */\n    const { errors, isValid } = validateRequestBody(req.body);\n    /** Return with error status if errors are found. */\n    if (!isValid) {\n      return res.status(400).json(errors);\n    }\n\n    /** Get image url from request body. */\n    let { imgUrl } = req.body;\n    /** Set response to type to image jpg. */\n    res.type('jpg');\n    /** Resize image then pipe it to response object. */\n    download(imgUrl).then(response => response.pipe(transform()).pipe(res));\n  }\n);\n\n/** Download function with axios.\n * Set response type to stream for large data.\n */\nconst download = url =>\n  axios({\n    method: 'get',\n    url,\n    responseType: 'stream'\n  }).then(response => response.data);\n\n/** Transform function with Sharp.\n * Resizes image to 50x50 pixels\n * and returns it.\n */\nconst transform = () => {\n  const sharpObj = sharp();\n  sharpObj.resize(50, 50);\n  return sharpObj;\n};\n\nexport default router;\n"]}