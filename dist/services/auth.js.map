{"version":3,"sources":["../../src/services/auth.js"],"names":["router","express","Router","post","req","res","body","errors","isValid","status","json","payload","username","password","jwt","sign","secretOrKey","expiresIn","err","token","success","session"],"mappings":";;;;;;AAGA;;;;AACA;;;;AAIA;;AAGA;;;;;;AAXA;;AAEA;AAGA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;AAGA;;;AAGA;;;;;;AAMAF,OAAOG,IAAP,CAAY,QAAZ,EAAsB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAClC;AADkC,4BAEN,qBAAmBD,IAAIE,IAAvB,CAFM;AAAA,MAE1BC,MAF0B,uBAE1BA,MAF0B;AAAA,MAElBC,OAFkB,uBAElBA,OAFkB;AAGlC;;;AACA,MAAI,CAACA,OAAL,EAAc;AACZ,WAAOH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,MAArB,CAAP;AACD;AACD;AACA,MAAMI,UAAU;AACdC,cAAUR,IAAIE,IAAJ,CAASM,QADL;AAEdC,cAAUT,IAAIE,IAAJ,CAASO;AAFL,GAAhB;AAIA;;;;AAIAC,yBAAIC,IAAJ,CAASJ,OAAT,EAAkBK,iBAAlB,EAA+B,EAAEC,WAAW,IAAb,EAA/B,EAAoD,UAACC,GAAD,EAAMC,KAAN,EAAgB;AAClE,WAAOd,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BU,eAAS,IADiB;AAE1BC,eAAS,YAAYF;AAFK,KAArB,CAAP;AAID,GALD;AAMD,CAtBD;;kBAwBenB,M","file":"auth.js","sourcesContent":["/** @module src/services/auth */\n\n/** Import dependencies. */\nimport express from 'express';\nimport jwt from 'jsonwebtoken';\nconst router = express.Router();\n\n/** Import secretOrKey option from config/keys. */\nimport { secretOrKey } from '../config/keys';\n\n/** Import validation function. */\nimport validateLoginInput from '../validation/login';\n\n/**\n * @function login\n * Router post function for /login route.\n * Gets user login credentials from request body\n * and creates a signed token from it.\n */\nrouter.post('/login', (req, res) => {\n  /** Validate request body first. */\n  const { errors, isValid } = validateLoginInput(req.body);\n  /** Respond with errors and 400 status if errors found. */\n  if (!isValid) {\n    return res.status(400).json(errors);\n  }\n  /** Get user credentials from request body. */\n  const payload = {\n    username: req.body.username,\n    password: req.body.password\n  };\n  /** Pass in user credentials as payload and sign token.\n   * Return true if successful along with session token.\n   * Set token expiration to 1 hour.\n   */\n  jwt.sign(payload, secretOrKey, { expiresIn: 3600 }, (err, token) => {\n    return res.status(200).json({\n      success: true,\n      session: 'Bearer ' + token\n    });\n  });\n});\n\nexport default router;\n"]}